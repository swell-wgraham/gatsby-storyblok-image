{"version":3,"file":"index.mjs","sources":["../src/utils/getBasicImageProps.js","../src/defaults.js","../src/utils/helpers.js","../src/utils/buildImageUrl.js","../src/utils/cacheImageInfo.js","../src/getFixedGatsbyImage.js","../src/getFluidGatsbyImage.js"],"sourcesContent":["const validImageUrlPattern = /^(https?:)?\\/\\/a.storyblok.com\\/f\\/[0-9]+\\/[0-9]+x[0-9]+\\/[A-Za-z0-9]+\\/[\\S]+\\.[a-z]+/\r\n\r\nfunction getBasicImageProps(image) {\r\n  let url = null\r\n  let lqip = null\r\n\r\n  if (typeof image === 'string') {\r\n    url = image\r\n  }\r\n\r\n  if (typeof image === 'object') {\r\n\r\n    if ( image.fieldtype === \"asset\" ) {\r\n\r\n      url = image.filename;\r\n\r\n    } else {\r\n      \r\n      url = image.image\r\n      lqip = image.base64 ? image.base64 : null\r\n\r\n    }\r\n  }\r\n\r\n  url = validImageUrlPattern.test(url) ? url : null\r\n\r\n  if (!url) {\r\n    return false\r\n  }\r\n\r\n  /*\r\n  *  http://a.storyblok.com/\r\n  *  https://a.storyblok.com/\r\n  *  //a.storyblok.com/\r\n  */\r\n  const storyblokRegex = /^(https?:)?\\/\\/a.storyblok.com\\//\r\n  \r\n  let originalPath = url.replace(storyblokRegex, '')\r\n\r\n  let [, , dimensions, , filename] = originalPath.split('/')\r\n  let [width, height] = dimensions.split('x').map(num => parseInt(num, 10))\r\n  let [, extension] = filename.split('.')\r\n\r\n  let aspectRatio = width / height\r\n  let metadata = { dimensions: { width, height, aspectRatio }, lqip }\r\n\r\n  return {\r\n    originalPath,\r\n    extension,\r\n    metadata\r\n  }\r\n}\r\n\r\nexport default getBasicImageProps\r\n","import path from 'path'\r\n\r\nexport const DEFAULT_FIXED_WIDTH = 400\r\nexport const DEFAULT_FLUID_MAX_WIDTH = 800\r\nexport const STORYBLOK_BASE_URL = 'https://img2.storyblok.com'\r\nexport const CACHE_DIR = path.resolve(`.cache/storyblok/assets/`)\r\n\r\nexport const sizeMultipliersFixed = [1, 1.5, 2, 3]\r\nexport const sizeMultipliersFluid = [0.25, 0.5, 1, 1.5, 2, 3]\r\n\r\nexport const defaultOptions = {\r\n  quality: 100,\r\n  smartCrop: true,\r\n  format: null,\r\n  fill: null,\r\n  toFormat: null,\r\n  base64: null,\r\n  useBase64: true\r\n}\r\n\r\nexport const defaultFluidOptions = {\r\n  ...defaultOptions,\r\n  maxWidth: DEFAULT_FLUID_MAX_WIDTH,\r\n  maxHeight: null\r\n}\r\n\r\nexport const defaultFixedOptions = {\r\n  ...defaultOptions,\r\n  width: DEFAULT_FIXED_WIDTH,\r\n  height: null\r\n}\r\n","export function applyFilters(filters) {\r\n  return filters.reduce((acc, currentFilter, i) => {\r\n    return `${acc}:${currentFilter}`\r\n  }, '/filters')\r\n}\r\n\r\nexport function isWebP(url) {\r\n  const isConverted = url.includes('filters:format(webp)')\r\n  const isOriginal = /[a-f0-9]+-\\d+x\\d+\\.webp/.test(url)\r\n  return isConverted || isOriginal\r\n}\r\n\r\nexport function transformSrcSet(srcSet, suffix = '') {\r\n  return srcSet\r\n    .map(src => {\r\n      const [url, dim] = src.split(' ')\r\n      const imageName = url.split('/').slice(-1)\r\n      return `/static/${dim}--${imageName}${suffix} ${dim}`\r\n    })\r\n    .join(',\\n')\r\n}","import { STORYBLOK_BASE_URL } from '../defaults'\r\nimport { applyFilters } from './helpers'\r\n\r\nfunction buildImageUrl(originalPath, image) {\r\n  let { width, height, smartCrop, quality, format, fill } = image\r\n\r\n  let [, extension] = originalPath.split('.')\r\n\r\n  let url = STORYBLOK_BASE_URL\r\n\r\n  if (width && height) {\r\n    url += `/${width}x${height}`\r\n  }\r\n\r\n  if (smartCrop) {\r\n    url += `/smart`\r\n  }\r\n\r\n  let filters = [\r\n    ...[quality && `quality(${quality})`],\r\n    ...[format && format !== extension && `format(${format})`],\r\n    ...[fill && `fill(${fill})`]\r\n  ]\r\n\r\n  // remove falsy elements\r\n  filters = filters.filter(element => Boolean(element) === true)\r\n\r\n  if (filters.length > 0) {\r\n    url += applyFilters(filters)\r\n  }\r\n\r\n  // add original path at the end\r\n  url += `/${originalPath}`\r\n\r\n  return url\r\n}\r\n\r\nexport default buildImageUrl\r\n","import { resolve } from 'path'\nimport { CACHE_DIR } from '../defaults'\n\nexport default function cacheImageInfo({ imageName, src, srcWebp, srcSets }) {\n  if (typeof window === 'undefined') {\n    // importing fs cause issues with gatsby-image\n    const fs = require('fs-extra')\n\n    const filePath = resolve(CACHE_DIR + '/' + imageName)\n    fs.pathExists(filePath + '.json').then(exists => {\n      if (!exists) {\n        fs.writeJsonSync(filePath + '.json', {\n          name: imageName,\n          src,\n          srcSet: srcSets.base,\n          srcWebp,\n          srcSetWebp: srcSets.webp,\n        })\n      }\n    })\n  }\n}\n","import getBasicImageProps from './utils/getBasicImageProps'\r\nimport buildUrl from './utils/buildImageUrl'\r\nimport { isWebP, transformSrcSet } from './utils/helpers'\r\nimport { sizeMultipliersFixed, defaultFixedOptions } from './defaults'\r\nimport cacheImageInfo from './utils/cacheImageInfo'\r\n\r\nfunction getFixedGatsbyImage(image, args = {}) {\r\n  let imageProps = getBasicImageProps(image)\r\n\r\n  if (!imageProps) {\r\n    return null\r\n  }\r\n\r\n  let options = {\r\n    ...defaultFixedOptions,\r\n    ...args\r\n  }\r\n\r\n  let { width, height, base64, useBase64 } = options\r\n  let {\r\n    metadata: { dimensions, lqip },\r\n    originalPath\r\n  } = imageProps\r\n\r\n  let desiredAspectRatio = dimensions.aspectRatio\r\n\r\n  // If we're cropping, calculate the specified aspect ratio\r\n  if (options.height) {\r\n    desiredAspectRatio = width / options.height\r\n  }\r\n\r\n  let forceConvert = null\r\n  if (options.toFormat) {\r\n    forceConvert = options.toFormat\r\n  } else if (isWebP(originalPath)) {\r\n    forceConvert = 'jpg'\r\n  }\r\n\r\n  let widths = sizeMultipliersFixed.map(scale => Math.round(width * scale))\r\n  let initial = { webp: [], base: [] }\r\n\r\n  let srcSets = widths\r\n    .filter(currentWidth => currentWidth < dimensions.width)\r\n    .reduce((acc, currentWidth, i) => {\r\n      let resolution = `${sizeMultipliersFixed[i]}x`\r\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\r\n\r\n      let size = {\r\n        ...options,\r\n        width: currentWidth,\r\n        height: currentHeight\r\n      }\r\n\r\n      let webpUrl = buildUrl(originalPath, {\r\n        ...size,\r\n        ...{ format: 'webp' }\r\n      })\r\n\r\n      let baseUrl = buildUrl(originalPath, {\r\n        ...size,\r\n        ...(forceConvert && { format: forceConvert })\r\n      })\r\n\r\n      acc.webp.push(`${webpUrl} ${resolution}`)\r\n      acc.base.push(`${baseUrl} ${resolution}`)\r\n\r\n      return acc\r\n    }, initial)\r\n\r\n  let outputHeight = Math.round(height ? height : width / desiredAspectRatio)\r\n\r\n  let imgSize = {\r\n    ...options,\r\n    width: width,\r\n    height: outputHeight\r\n  }\r\n\r\n  let src = buildUrl(originalPath, {\r\n    ...imgSize,\r\n    ...(forceConvert && { format: forceConvert })\r\n  })\r\n\r\n  let srcWebp = buildUrl(originalPath, {\r\n    ...imgSize,\r\n    ...{ format: 'webp' }\r\n  })\r\n\r\n  const isProduction = process.env.NODE_ENV === 'production'\r\n  let srcPath, srcSetPath, srcWebpPath, srcSetWebpPath\r\n\r\n  if (isProduction && options.saveLocal) {\r\n    const [url] = src.split(' ')\r\n    const imageName = url.split('/').slice(-1)\r\n    cacheImageInfo({ imageName, src, srcSets, srcWebp })\r\n    srcPath = `/static/${imageName}`\r\n    srcSetPath = transformSrcSet(srcSets.base)\r\n    srcWebpPath = `/static/${imageName}.webp`\r\n    srcSetWebpPath = transformSrcSet(srcSets.base, '.webp')\r\n  } else {\r\n    srcPath = src\r\n    srcSetPath = srcSets.base.join(',\\n') || null\r\n    srcWebpPath = srcWebp\r\n    srcSetWebpPath = srcSets.webp.join(',\\n') || null\r\n  }\r\n\r\n  // base64String\r\n  \r\n\r\n  return {\r\n    base64: image.base64 || null,\r\n    aspectRatio: desiredAspectRatio,\r\n    width: Math.round(width),\r\n    height: outputHeight,\r\n    src: srcPath,\r\n    srcSet: srcSetPath,\r\n    srcWebp: srcWebpPath,\r\n    srcSetWebp: srcSetWebpPath,\r\n  }\r\n}\r\n\r\nexport default getFixedGatsbyImage\r\n","import getBasicImageProps from './utils/getBasicImageProps'\r\nimport buildUrl from './utils/buildImageUrl'\r\nimport { isWebP, transformSrcSet } from './utils/helpers'\r\nimport { sizeMultipliersFluid, defaultFluidOptions } from './defaults'\r\nimport cacheImageInfo from './utils/cacheImageInfo';\r\n\r\nfunction getFluidGatsbyImage(image, args = {}) {\r\n  let imageProps = getBasicImageProps(image)\r\n\r\n  if (!imageProps) {\r\n    return null\r\n  }\r\n\r\n  let options = {\r\n    ...defaultFluidOptions,\r\n    ...args\r\n  }\r\n\r\n  let { maxWidth, base64, useBase64 } = options\r\n\r\n  let {\r\n    metadata: { dimensions, lqip },\r\n    originalPath\r\n  } = imageProps\r\n\r\n  let desiredAspectRatio = dimensions.aspectRatio\r\n\r\n  // If we're cropping, calculate the specified aspect ratio\r\n  if (options.maxHeight) {\r\n    desiredAspectRatio = maxWidth / options.maxHeight\r\n  }\r\n\r\n  let maxHeight = options.maxHeight || Math.round(maxWidth / dimensions.aspectRatio)\r\n\r\n  let forceConvert = null\r\n  if (options.toFormat) {\r\n    forceConvert = options.toFormat\r\n  } else if (isWebP(originalPath)) {\r\n    forceConvert = 'jpg'\r\n  }\r\n\r\n  let sizes = options.sizes || `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`\r\n  let widths = sizeMultipliersFluid\r\n    .map(scale => Math.round(maxWidth * scale))\r\n    .filter(width => width < dimensions.width)\r\n    .concat(dimensions.width)\r\n\r\n  let initial = { webp: [], base: [] }\r\n  let srcSets = widths\r\n    .filter(currentWidth => currentWidth < dimensions.width)\r\n    .reduce((acc, currentWidth) => {\r\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\r\n\r\n      let size = {\r\n        width: currentWidth,\r\n        height: currentHeight\r\n      }\r\n\r\n      let webpUrl = buildUrl(originalPath, {\r\n        ...options,\r\n        ...size,\r\n        ...{ format: 'webp' }\r\n      })\r\n\r\n      let baseUrl = buildUrl(originalPath, {\r\n        ...options,\r\n        ...size,\r\n        ...{ format: forceConvert }\r\n      })\r\n\r\n      acc.webp.push(`${webpUrl} ${currentWidth}w`)\r\n      acc.base.push(`${baseUrl} ${currentWidth}w`)\r\n      return acc\r\n    }, initial)\r\n\r\n  let imgSize = { width: maxWidth, height: maxHeight }\r\n\r\n  let src = buildUrl(originalPath, {\r\n    ...options,\r\n    ...imgSize,\r\n    ...{ format: forceConvert }\r\n  })\r\n\r\n  let srcWebp = buildUrl(originalPath, {\r\n    ...options,\r\n    ...imgSize,\r\n    ...{ format: 'webp' }\r\n  })\r\n\r\n  const isProduction = process.env.NODE_ENV === 'production'\r\n  let srcPath, srcSetPath, srcWebpPath, srcSetWebpPath\r\n\r\n  if (isProduction && options.saveLocal) {\r\n    const [url] = src.split(' ')\r\n    const imageName = url.split('/').slice(-1)\r\n    cacheImageInfo({ imageName, src, srcSets, srcWebp })\r\n    srcPath = `/static/${imageName}`\r\n    srcSetPath = transformSrcSet(srcSets.base)\r\n    srcWebpPath = `/static/${imageName}.webp`\r\n    srcSetWebpPath = transformSrcSet(srcSets.base, '.webp')\r\n  } else {\r\n    srcPath = src\r\n    srcSetPath = srcSets.base.join(',\\n') || null\r\n    srcWebpPath = srcWebp\r\n    srcSetWebpPath = srcSets.webp.join(',\\n') || null\r\n  }\r\n\r\n  return {\r\n    base64: image.base64 || null,\r\n    aspectRatio: desiredAspectRatio,\r\n    src: srcPath,\r\n    srcSet: srcSetPath,\r\n    srcWebp: srcWebpPath,\r\n    srcSetWebp: srcSetWebpPath,\r\n    sizes,\r\n  }\r\n}\r\n\r\nexport default getFluidGatsbyImage\r\n"],"names":["const","validImageUrlPattern","getBasicImageProps","image","url","lqip","fieldtype","filename","base64","test","originalPath","replace","split","map","num","parseInt","dimensions","width","height","STORYBLOK_BASE_URL","CACHE_DIR","path","resolve","sizeMultipliersFixed","sizeMultipliersFluid","defaultOptions","quality","smartCrop","format","fill","toFormat","useBase64","defaultFluidOptions","Object","maxWidth","maxHeight","defaultFixedOptions","isWebP","isConverted","includes","isOriginal","transformSrcSet","srcSet","suffix","src","dim","slice","join","buildImageUrl","filters","filter","element","Boolean","length","reduce","acc","currentFilter","i","applyFilters","cacheImageInfo","ref","window","fs","require","filePath","imageName","pathExists","then","exists","writeJsonSync","name","srcSets","base","srcWebp","srcSetWebp","webp","getFixedGatsbyImage","args","imageProps","options","desiredAspectRatio","aspectRatio","forceConvert","srcPath","srcSetPath","srcWebpPath","srcSetWebpPath","scale","Math","round","currentWidth","resolution","currentHeight","size","webpUrl","buildUrl","baseUrl","push","outputHeight","imgSize","process","env","NODE_ENV","saveLocal","getFluidGatsbyImage","sizes","concat"],"mappings":"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"}